Linear and Kernel SVM 
In this part, you will experiment with SVMs on a real-world dataset. You will implement linear SVM (i.e. SVM using the original features, namely the nonlinear mapping is the identity mapping). Also, you will use a widely used SVM toolbox called LIBSVM to experiment with kernel SVMs.
Dataset: We have provided the Phishing Websites Data Set from UCI’s machine learning data repository (https://archive.ics.uci.edu/ml/datasets/Phishing+Websites). The dataset is for a bi- nary classification problem to detect phishing websites. The dimensionality of the input feature is 30, and the training and test sets contain 2,000 and 2,000 samples, respectively (they are provided on Blackboard as phishing-train.mat and phishing-test.mat). The datasets can be imported directly in MATLAB and using Scipy.io in Python.
Data preprocessing
All the features in the datasets are categorical. You need to preprocess the training and test data to make features with multiple values to features taking values only zero or one. If a feature fi have value {−1, 0, 1}, we create three new features fi,−1 , fi,0 and fi,1 . Only one of them can have value 1 and fi,x = 1 if and only if fi = x. For example, we transform the original feature 1 into [0, 0, 1]. In the given dataset, the features 2, 7, 8, 14, 15, 26, 29 (index starting from 1) take three different values {−1, 0, 1}. You need to transform each above feature into three 0/1 features. Modification: And also transform any feature of {−1,1} to {0,1}. Note that all elements of pre-processed must be 0 or 1 and no need to convert feature 16 to three columns
Use linear SVM in LIBSVM
LIBSVM is widely used toolbox for SVM and has both a Matlab and a Python interface. Download LIBSVM from https://www.csie.ntu.edu.tw/~cjlin/libsvm/ and install it according to the README file. For each C from {4−6, 4−5, · · · , 4, 42}, apply 3-fold cross validation (use -v option in LIBSVM) and report the cross validation accuracy and average training time. 

Kernel SVM in LIBSVM
LIBSVM supports a number of kernel types. Here you need to experiment with the polynomial kernel and RBF (Radial Basis Function) kernel.
(a) Polynomial kernel. Please tune C and degree in the kernel. For each combination of (C, degree), where C ∈ {4−3, 4−2, · · · , 46, 47} and degree ∈ {1, 2, 3}, report the 3-fold cross validation accuracy and average training time. 
(b) RBF kernel. Please tune C and gamma in the kernel. For each combination of (C, gamma), where C ∈ {4−3, 4−2, · · · , 46, 47} and gamma ∈ {4−7, 4−6, · · · , 4−2, 4−1}, report the 3-fold cross validation accuracy and average training time. 
Based on the cross validation results of Polynomial and RBF kernel, which kernel type and kernel parameters will you choose? You need to write a script libsvm.m/libsvm.py using the best kernel and the parame- ters selected from cross-validation. Your script should train a SVM using libsvm with selected kernel and parameters and output the accuracy on the test set. 
